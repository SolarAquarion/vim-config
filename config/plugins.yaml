---
# PLUGINS
# ===
# See config/plugins/all.vim for plugin mappings and config/plugins/*.vim

# Startup
# -------
- repo: Shougo/dein.vim
- repo: haya14busa/dein-command.vim
- repo: thinca/vim-localrc
- repo: Shougo/context_filetype.vim
- { repo: Shougo/vimproc.vim, build: make }
- repo: jaawerth/nrun.vim
- { repo: rafi/awesome-vim-colorschemes, merged: 0 }

- { repo: ajmwagar/vim-deus, merged: 0 }
- repo: sgur/vim-editorconfig
  hook_add: |-
    let g:editorconfig_verbose = 1
    let g:editorconfig_blacklist = {
      \ 'filetype': [
      \   'git.*', 'fugitive', 'help', 'defx', 'denite.*', 'startify',
      \   'vista.*', 'tagbar', 'lsp-.*', 'clap_.*', 'any-jump', 'gina-.*',
      \   'lsp-*'
      \  ],
      \ 'pattern': ['\.un~$']
      \ }

# Improve CursorHold performance
# See: https://github.com/neovim/neovim/issues/12587
- { repo: antoinemadec/FixCursorHold.nvim, if: "has('nvim')" }

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"

- repo: tpope/vim-sleuth
  hook_add: let g:sleuth_neighbor_limit = 5

- repo: tpope/vim-dispatch

# GUI only:
- { repo: equalsraf/neovim-gui-shim, if: has('gui_running') }

# Vim8 only:
- { repo: roxma/nvim-yarp, if: "! has('nvim')", depends: vim-hug-neovim-rpc }
- { repo: roxma/vim-hug-neovim-rpc, if: "! has('nvim')" }

# Lazy Loading
# ==========================================

# Languages
# ---------
- { repo: hail2u/vim-css3-syntax, on_ft: css }
- { repo: othree/csscomplete.vim, on_ft: css }
- { repo: cakebaker/scss-syntax.vim, on_ft: [ scss, sass ]}
- { repo: groenewege/vim-less, on_ft: less }
- { repo: iloginow/vim-stylus, on_ft: stylus }  # or wavded/vim-stylus ?
- { repo: mustache/vim-mustache-handlebars, on_ft: [html, mustache, handlebars]}
- { repo: digitaltoad/vim-pug, on_ft: [ pug, jade ]}

- repo: othree/html5.vim
  on_ft: html
  hook_add: |-
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

#PKGBUILD related
- repo: m-pilia/vim-pkgbuild

# Markdown related
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |-
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 1
    let g:vim_markdown_conceal_code_blocks = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_toc_autofit = 0
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'jsx=javascriptreact',
      \ 'tsx=typescriptreact',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

# Javascript related
- repo: pangloss/vim-javascript
  on_ft: [ javascript, javascriptreact ]
  hook_add: let g:javascript_plugin_jsdoc = 1

- repo: HerringtonDarkholme/yats.vim
  on_ft: [ typescript, typescriptreact ]

- repo: MaxMEllon/vim-jsx-pretty
  on_ft: [ javascript, javascriptreact, typescriptreact ]
  depends: vim-javascript
  hook_add: let g:vim_jsx_pretty_colorful_config = 1

- { repo: leafOfTree/vim-svelte-plugin, depends: yats.vim, on_ft: svelte }
- { repo: heavenshell/vim-jsdoc, on_ft: [ javascript, javascriptreact ] }
- { repo: jparise/vim-graphql, on_ft: [ javascript, javascriptreact ] }
- { repo: moll/vim-node, on_ft: [ javascript, javascriptreact ] }
- { repo: kchmck/vim-coffee-script, on_ft: [ coffee, litcoffee ] }
- { repo: elzr/vim-json, on_ft: json }
- { repo: posva/vim-vue, on_ft: vue }

# pangloss/javascript vs. othree/yajs
#- { repo: othree/yajs.vim, on_ft: [ javascript, javascriptreact ]}
#- { repo: gavocanov/vim-js-indent, on_ft: [ javascript, javascriptreact ]}
#- repo: mxw/vim-jsx
#  on_ft: [ javascript, javascriptreact ]
#  hook_add: let g:jsx_ext_required = 0

# Python related
- { repo: vim-python/python-syntax, on_ft: python }
- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }  # ?
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

# C/C++ related
- repo: WolfgangMehner/c-support
  on_ft: [c, cpp]

- repo: bfrg/vim-cpp-modern
  on_ft: cpp
  hook_add: |-
    let g:cpp_attributes_highlight = 1
    let g:cpp_member_highlight = 1
    let g:cpp_simple_highlight = 1

# Misc
- { repo: ilyachur/cmake4vim, on_ft: cmake }
- { repo: StanAngeloff/php.vim, on_ft: php }
- { repo: tbastos/vim-lua, on_ft: lua }
- { repo: vim-ruby/vim-ruby, on_ft: ruby }
- { repo: keith/swift.vim, on_ft: swift }
- { repo: rust-lang/rust.vim, on_ft: rust }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }
- { repo: chrisbra/csv.vim, on_ft: csv }
- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}
- { repo: ekalinin/Dockerfile.vim, on_ft: [ Dockerfile, docker-compose ]}
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }
- { repo: MTDL9/vim-log-highlighting, on_ft: log }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: mboughaba/i3config.vim, on_ft: i3config }
- { repo: dag/vim-fish, on_ft: fish }
- { repo: jstrater/mpvim, on_ft: portfile }
- { repo: robbles/logstash.vim, on_ft: logstash }
- { repo: lifepillar/pgsql.vim, on_ft: pgsql }
- { repo: chr4/nginx.vim, on_ft: nginx }
- { repo: towolf/vim-helm, on_ft: helm }
- { repo: udalov/kotlin-vim, on_ft: kotlin }
- { repo: reasonml-editor/vim-reason-plus, on_ft: [ reason, merlin ] }
- { repo: kovetskiy/vim-bash, on_ft: bash }
- { repo: igankevich/mesonic, on_ft: [ meson, mesonopt ] }
- repo: sheerun/vim-polyglot
  build: make

- repo: tyru/caw.vim
- repo: preservim/tagbar
- repo: ludovicchabant/vim-gutentags

- repo: preservim/nerdcommenter
  hook_add: |-
    let g:NERDSpaceDelims = 1
    let g:NERDCreateDefaultMappings = 0
    let g:NERDRemoveExtraSpaces = 1
    let g:NERDCompactSexyComs = 1
    let g:NERDDefaultAlign = 'left'
    let g:NERDCommentEmptyLines = 1
    let g:NERDTrimTrailingWhitespace = 1
    let g:NERD_c_alt_style = 1
    let g:NERDCustomDelimiters = {'c': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' }}
    let g:ft = ''

- repo: pearofducks/ansible-vim
  on_ft: [ ansible, ansible_hosts, jinja2 ]
  hook_add: |-
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }

- repo: hashivim/vim-terraform
  on_ft: terraform
  on_cmd: [ Terraform, TerraformFmt ]


# ==========================================
# Commands
# --------
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source $CFGPATH/plugins/defx.vim

- { repo: kristijanhusak/defx-git, on_source: defx.nvim }
- { repo: kristijanhusak/defx-icons, on_source: defx.nvim }

- { repo: tyru/caw.vim, on_map: { nx: <Plug> }}
- { repo: lambdalisue/fin.vim, on_cmd: Fin }
- { repo: mbbill/undotree, on_cmd: UndotreeToggle }
- { repo: jreybert/vimagit, on_cmd: Magit }
- { repo: tweekmonster/helpful.vim, on_cmd: HelpfulVersion }
- { repo: kana/vim-altr, on_map: { n: <Plug> }}
- { repo: Shougo/vinarise.vim, on_cmd: Vinarise }
- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
- { repo: cocopon/colorswatch.vim, rev: main, on_cmd: ColorSwatchGenerate }
- { repo: dstein64/vim-startuptime, on_cmd: StartupTime }
- { repo: lambdalisue/suda.vim, on_event: BufRead }

- repo: liuchengxu/vim-which-key
  on_cmd: [ WhichKey, WhichKeyVisual ]
  hook_source: source $CFGPATH/plugins/whichkey.vim

- repo: lambdalisue/gina.vim
  on_cmd: Gina
  on_ft: [ gitcommit, gitrebase ]
  hook_source: source $CFGPATH/config/plugins/gina.vim

- repo: mhinz/vim-grepper
  on_map: { nx: <Plug> }
  on_cmd: Grepper
  hook_add: |-
    let g:grepper = {
        \ 'tools': ['rg', 'git', 'fd', 'ag'],
        \ 'fd': {
        \   'grepprg':    'fd',
        \   'grepformat': '%f',
        \   'escape':     '\+*^$()[]',
        \ }}

- repo: wsdjeg/FlyGrep.vim

- {repo: wincent/command-t, build: 'rake make', merged:0}

- {repo: Yggdroot/LeaderF, do: ':LeaderInstallCExtension', merged:0 }

- repo: brooth/far.vim
  on_cmd: [ Far, Farp, F ]
  hook_source: |-
    if executable('rg')
      let g:far#source = 'rg'
    elseif executable('ag')
      let g:far#source = 'ag'
    elseif executable('ack')
      let g:far#source = 'ack'
    endif

- repo: pechorin/any-jump.vim
  on_cmd: [ AnyJump, AnyJumpVisual ]
  hook_add: |-
    let g:any_jump_disable_default_keybindings = 1
    autocmd user_events FileType any-jump setlocal cursorline

- repo: Vigemus/iron.nvim
  if: has('nvim')
  on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: luafile $CFGPATH/plugins/iron.lua

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }
  hook_add: let g:niceblock_no_default_key_mappings = 0

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_add: |-
    let g:choosewin_label = 'ADFGHJKLUIOPQWERT'
    let g:choosewin_label_padding = 5

- repo: wfxr/minimap.vim
  on_cmd: [ Minimap, MinimapToggle ]
  hook_source: |-
    let g:minimap_block_filetypes = ['fugitive', 'nerdtree', 'defx']

- repo: mzlogin/vim-markdown-toc
  on_cmd: [ GenTocGFM, GenTocRedcarpet, GenTocGitLab, UpdateToc ]
  hook_add: let g:vmt_auto_update_on_save = 0

- repo: reedes/vim-wordy
  on_cmd: [ Wordy, NoWordy, NextWordy ]
  # hook_add: let g:wordy_spell_dir = $DATA_PATH . '/wordy'

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_add: |-
    let g:vista#renderer#enable_icon = 1
    let g:vista_echo_cursor_strategy = 'scroll'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ }

- repo: junegunn/fzf
  merged: 0
  on_cmd: FZF
  type__depth: 1
  hook_source: |-
    let g:fzf_layout = { 'down': '~25%' }

- repo: junegunn/fzf.vim
  depends: fzf
  merged: 0
  on_cmd: [ Files, GitFiles, Buffers, Lines, Locate, Colors, Ag, Rg, Tags ]
  on_func: [ fzf#vim#with_preview, fzf#run, vista#finder#fzf#Run ]

- {repo: yuki-ycino/fzf-preview.vim, rev: release/rpc}

- repo: ctrlpvim/ctrlp.vim

- repo: wincent/command-t
  build: "rake make"
  hooks_add: |-
    let g:CommandTMatchWindowAtTop=1
    let g:CommandTMaxHeight=10
    let g:CommandTMinHeight=2

- repo: Ron89/thesaurus_query.vim
  on_cmd:
    - Thesaurus
    - ThesaurusQueryReplaceCurrentWord
    - ThesaurusQueryLookupCurrentWord
  hook_add: |-
    let g:tq_map_keys = 0
    let g:tq_use_vim_autocomplete = 0

# ==========================================
# Interface
# ---------
- { repo: itchyny/vim-gitbranch, on_event: FileType }
- { repo: itchyny/vim-parenmatch, on_event: FileType }
- { repo: romainl/vim-cool, on_event: [ CursorMoved, InsertEnter ]}
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }, if: $SUDO_USER == '' }
- { repo: haya14busa/vim-edgemotion, on_map: { nv: <Plug> }}
- { repo: t9md/vim-quickhl, on_map: { nv: <Plug> }}
- { repo: rafi/vim-sidemenu, on_map: { nv: <Plug> }}

- repo: machakann/vim-highlightedyank
  if: "! has('nvim-0.5')"
  on_event: TextYankPost
  hook_source: let g:highlightedyank_highlight_duration = 200

- repo: itchyny/vim-cursorword
  on_event: FileType
  hook_add: let g:cursorword = 0
  hook_source: |-
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType json,yaml,markdown,nginx,dosini,conf
        \ let b:cursorword = 1
      autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
      autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1
        \| let b:cursorword = 0
        \| endif
      autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0
        \| let b:cursorword = 1
        \| endif
    augroup END

- repo: airblade/vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▍'
    let g:gitgutter_sign_removed_first_line = '▘'
    let g:gitgutter_sign_removed_above_and_below = '_¯'
    let g:gitgutter_sign_modified_removed = '▍'
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_sign_allow_clobber = 0
    let g:gitgutter_sign_priority = 0
    let g:gitgutter_override_sign_column_highlight = 0

- repo: kshenoy/vim-signature
  depends: vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:SignatureForceRemoveGlobal = 0
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('⚐', 10)
    autocmd user_events User GitGutter call signature#sign#Refresh()

- repo: nathanaelkane/vim-indent-guides
  on_event: FileType
  hook_source: |-
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_tab_guides = 0
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = [
      \ 'help', 'man', 'fern', 'defx', 'denite', 'denite-filter', 'startify',
      \ 'vista', 'vista_kind', 'tagbar', 'lsp-hover', 'clap_input', 'fzf',
      \ 'any-jump', 'gina-status', 'gina-commit', 'gina-log', 'minimap',
      \ 'quickpick-filter', 'lsp-quickpick-filter'
      \ ]
    autocmd user_events FileType * ++once IndentGuidesEnable

- repo: rhysd/committia.vim
  on_event: BufReadPost
  hook_source: let g:committia_min_window_width = 70

- repo: junegunn/goyo.vim
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $CFGPATH/plugins/goyo.vim

- repo: junegunn/limelight.vim
  on_cmd: Limelight

- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: |-
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: deris/vim-shot-f
  on_map: { nxo: <Plug> }
  hook_add: let g:shot_f_no_default_key_mappings = 1

- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |-
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |-
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/books/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

- repo: norcalli/nvim-colorizer.lua
  if: has('nvim-0.4')
  on_event: FileType
  hook_source: luafile $CFGPATH/plugins/colorizer.lua

- repo: sickill/vim-pasta
# =========================================
# Tasks and Building
# ----------

- repo: skywind3000/asyncrun.vim
- repo: skywind3000/asynctasks.vim

# ==========================================
# Powerline and other such ricing
# ----------
- repo: yanoasis/vim-devicons

- repo: mhinz/vim-startify

- repo: mhinz/vim-signify

- repo: vim-airline/vim-airline
  hook_add: |-
    let g:airline#extensions#tabline#enabled = 0
    let g:airline#extensions#fugitiveline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#branch#enabled = 1
    let g:airline#extension#hunks#enabled = 1
    let g:airline#extension#coc#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline_detect_paste=1
    let g:airline#extensions#ctrlp#show_adjacent_modes = 1
    let g:airline#extensions#denite#enabled = 1
    let g:airline#extensions#fern#enabled = 1
    let g:airline#extensions#fugitiveline#enabled = 1
    let g:airline#extensions#fzf#enabled = 1
    let g:airline#extensions#grepper#enabled = 1
    let g:airline#extensions#hunks#coc_git = 1
    let g:airline#extensions#nerdtree_statusline = 1

- repo: luochen1990/rainbow
  hook_add: |-
    let g:rainbow_active=1

# ==========================================
# Completion and code analysis
# ----------

- repo: prabirshrestha/async.vim  # only autoload functions, lazy by nature

- repo: Shougo/neco-vim

- repo: jackguo380/vim-lsp-cxx-highlight

- repo: neocline/coc-neco

- {repo: neoclide/coc-snippets, build: 'npm install --frozen-lockfile'}

- repo: antoinemadec/coc-fzf

- repo: dense-analysis/ale
  hook_add: |-
    let g:ale_sign_column_always=1
    let g:ale_linters_explicit=1
    let g:ale_fix_on_save = 1
    let g:ale_lint_delay=1200
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_lint_on_insert_leave = 1
    let g:ale_cache_executable_check_failures = 1

- repo: iyuuya/denite-ale
- repo: vn-ki/coc-clap

- repo: neoclide/coc-denite


- repo: wellle/tmux-complete.vim
  if: "! (has('win32') || has('win64'))"
  hook_add: |-
    let g:tmuxcomplete#trigger = ''

- repo: SirVer/ultisnips
  if: has('python3')
  on_event: FileType
  hook_add: |-
    let g:UltiSnipsExpandTrigger = '<C-l>'
    let g:UltiSnipsListSnippets = '<C-Tab>'
    let g:UltiSnipsJumpForwardTrigger = '<Tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

- repo: honza/vim-snippets
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft:
    - css
    - html
    - vue
    - svelte
    - javascript
    - javascriptreact
    - typescript
    - typescriptreact
  hook_source: |-
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [ BufReadPost, BufWritePost ]
  hook_add: |-
    let g:gutentags_cache_dir = $DATA_PATH . '/tags'
    let g:gutentags_generate_on_write = 0
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_project_root = [ '/usr/local' ]
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
    let g:gutentags_ctags_exclude = [
      \ '.idea', '.cache', '.tox', '.bundle', 'build', 'dist' ]

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: |-
    let g:delimitMate_expand_cr = 0
    let g:delimitMate_expand_space = 1
    let g:delimitMate_smart_quotes = 1
    let g:delimitMate_expand_inside_quotes = 0
    let g:delimitMate_excluded_ft = 'mail,txt,denite-filter,clap_input'
    augroup user_plugin_delimitMate
      au!
      au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
      au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
      au FileType tex let b:delimitMate_quotes = ""
      au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
    augroup END

# ==========================================
# Denite
# ------
- repo: Shougo/denite.nvim
  on_cmd: Denite
  trusted: 1
  hook_source: source $CFGPATH/plugins/denite.vim

- repo: Shougo/neomru.vim
  on_source: denite.nvim
  hook_add: |-
    let g:neomru#directory_mru_path = $DATA_PATH . '/mru/dir'
    let g:neomru#file_mru_path = $DATA_PATH . '/mru/file'
    let g:unite_source_file_mru_limit = 5000

- { repo: Shougo/neoyank.vim, on_source: denite.nvim, on_event: TextYankPost }
- { repo: Shougo/junkfile.vim, on_source: denite.nvim }
- { repo: chemzqm/unite-location, on_source: denite.nvim }
- { repo: rafi/vim-denite-session, on_source: denite.nvim }

- repo: rafi/vim-denite-z
  on_source: denite.nvim
  hook_source: |-
    command! -nargs=+ -complete=file Z call denite#start(
      \ [{'name': 'z', 'args': [<q-args>], {'immediately': 1}}])

- repo: liuchengxu/vim-clap
  merged: 0
  on_cmd: Clap
  do: ':Clap install-binary'
  hook_add: |-
    let g:clap_cache_directory = $DATA_PATH . '/clap'
    let g:clap_disable_run_rooter = v:true
    let g:clap_theme = 'atom_dark'
    let g:clap_layout = { 'relative': 'editor' }
    let g:clap_enable_icon = 1
    let g:clap_search_box_border_style = 'curve'
    let g:clap_provider_grep_enable_icon = 1
    let g:clap_prompt_format = '%spinner%%forerunner_status% %provider_id%: '
    let g:clap_current_selection_sign = {
      \ 'text': '→',
      \ 'texthl': 'ClapCurrentSelectionSign',
      \ 'linehl': 'ClapCurrentSelection' }
    let g:clap_selected_sign = {
      \ 'text': '* ',
      \ 'texthl': 'ClapSelectedSign',
      \ 'linehl': 'ClapSelected' }
    highlight! link ClapMatches Function
    highlight! link ClapNoMatchesFound WarningMsg

- repo: neoclide/denite-git
  on_source: denite.nvim

- repo: iyuuya/denite-ale
  on_source: denite.nvim

# ==========================================
# Nerdtree
# --------
- repo: preservim/nerdtree
   hook_add: |-
      let NERDTreeDirArrows=1
      let NERDTreeQuitOnOpen = 1
      let NERDTreeShowBookmarks=1
      let NERDTreeShowHidden=1
      let NERDTreeDirArrows=1
      let NERDTreeChDirMode=2
      let NERDTreeBookmarksFile= $HOME . '/.vim/NERDTreeBookmarks'
      let g:nerdtree_tabs_focus_on_files = 1

- repo: Xuyuanp/nerdtree-git-plugin

- repo: jistr/vim-nerdtree-tabs

- repo: liuchengxu/nerdtree-dash

- repo: tiagofumo/vim-nerdtree-syntax-highlight


# ==========================================
# Operators
# ---------
- repo: kana/vim-operator-user  # only autoload functions, lazy by nature

- { repo: kana/vim-operator-replace, on_map: { vnx: <Plug> }}

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |-
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

# ==========================================
# Text objects
# ------------
- repo: kana/vim-textobj-user  # only autoload functions, lazy by nature
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
- { repo: AndrewRadev/sideways.vim, on_map: { onx: <Plug>Sideways }}
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

- repo: kana/vim-textobj-function
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1

#  vim: set ts=2 sw=2 tw=80 et :
